'use strict'

// "use strict";

// document.write('<h1>–≤ JS document.write —Å —Ç–µ–≥–∞–º–∏ h1</h1>');
// alert("Javacript –ø–æ–¥–∫–ª—é—á–µ–Ω");
// console.log("–£—á–∏–º")
// console.log("JS")

// let mathFloor = Math.floor(Math.random() * 50);
// console.log(mathFloor); 								// Prints a random number

// console.log(Math.ceil(Math.random() * 10));

// const daysLeftOver = 367 % 7;
// const weeksInYear = Math.floor(365 / 7);
// console.log(weeksInYear);
// console.log(daysLeftOver);

// let age = 7;
// console.log('Tommy is ' + age + ' years old.'); 		// String concatenation
// console.log(`Tommy is ${age} years old.`); 			// String interpolation

// const food = 'salad';
// switch (food) {
// 	case 'oyster':
// 		console.log('The taste of the sea ü¶™');
// 		break;
// 	case 'pizza':
// 		console.log('A delicious pie üçï');
// 		break;
// 	default:
// 		console.log('Enjoy your meal');
// } 		// Prints: Enjoy your meal

// console.log(1 === '1'); 	 							// false, –ø–æ —Ç–∏–ø—É –Ω–µ —Ä–∞–≤–Ω—ã
// console.log(1 == '1');   							// true,  –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —Ä–∞–≤–Ω—ã

// let defaultName; 									// —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–∏–∫–ª if else
// if (username) {
// 	defaultName = username;
// } else {
// 	defaultName = 'Stranger';
// }
// let defaultName = username || 'Stranger'; 			// –≤–∞—Ä–∏–∞–Ω—Ç —Å –ò–õ–ò

// let isNightTime = true; 				  				// —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–∏–∫–ª if else
// if (isNightTime) {
// 	console.log('Turn on the lights!');
// } else {
// 	console.log('Turn off the lights!');
// }
// isNightTime ? console.log('Turn on the lights!') : console.log('Turn off the lights!');  // –≤–∞—Ä–∏–∞–Ω—Ç —Å —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ?

// console.log(greetWorld()); // Output: Hello, World! | –ø–µ—á–∞—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–æ –µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
// function greetWorld() {
// 	console.log('Hello, World!');
// }

// function rectangleArea(width, height) {
// 	let area = width * height;
// return area;				 // –±–µ–∑ return –≤–µ—Ä–Ω–µ—Ç undefined
// }
// console.log(rectangleArea(5, 7)) // Prints undefined

// let num = 50; // –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å—Ç–æ, const –Ω–µ –¥–∞—Å—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
// const logNum = () => {
// 	let num = 100; // Take note of this line of code
// 	console.log(num);
// };
// logNum(); // Prints 100
// console.log(num); // Prints 100

// const animals = ['Grizzly Bear', 'Sloth', 'Sea Lion'];
// for (let i = 0; i < animals.length; i++) {
// 	console.log(animals[i]);
// }

//–≤–ª–æ–∂–µ–Ω—ã–π —Ü–∏–∫–ª
// const myArray = [6, 19, 20];
// const yourArray = [19, 81, 2];
// for (let i = 0; i < myArray.length; i++) {
// 	for (let j = 0; j < yourArray.length; j++) {
// 		if (myArray[i] === yourArray[j]) {
// 			console.log('Both loops have the number: ' + yourArray[j])
// 		}
// 	}
// };

// // A for loop that prints 1, 2, and 3
// for (let counterOne = 1; counterOne < 4; counterOne++){
// 	console.log(counterOne);
//   }

//   // A while loop that prints 1, 2, and 3
//   let counterTwo = 1;
//   while (counterTwo < 4) {
// 	console.log(counterTwo);
// 	counterTwo++;
//   }

// // –∫–∞—Ä—Ç–æ—á–Ω–∞—è –º–∏–Ω–∏ –∏–≥—Ä–∞
// const cards = ['diamond', 'spade', 'heart', 'club'];
// let currentCard;
// while (currentCard != 'spade') {
// 	currentCard = cards[Math.floor(Math.random() * 4)]; // —Ä–∞–Ω–¥–æ–º —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 3 —Ä–∞–≤–Ω–æ –∏–Ω–¥–µ–∫—Å—É –∫–∞—Ä—Ç –æ—Ç 0 –¥–æ 3
// 	console.log(currentCard);
// };

// // –ø—Ä–∏–º–µ—Ä do –∏ while —Ü–∏–∫–ª–æ–≤
// do {
// 	console.log(firstMessage)
//    } while (true === false);

//    // A while loop with a stopping condition that evaluates to false
//    while (true === false){
// 	 console.log(secondMessage)
//    };

// const checkThatTwoPlusTwoEqualsFourAMillionTimes = () => {
// 	for (let i = 1; i <= 1000000; i++) {
// 		if ((2 + 2) != 4) {
// 			console.log('Something has gone very wrong :( ');
// 		}
// 	}
// };
// is2p2 = checkThatTwoPlusTwoEqualsFourAMillionTimes;
// is2p2();
// console.log(is2p2.name);

// –≤–ª–æ–∂–µ–Ω—ã–π —Ü–∏–∫–ª for
// for (let outer = 0; outer < 2; outer += 1) {
// 	for (let inner = 0; inner <= 5; inner += 1) {
// 		console.log(`${outer}-${inner}`);
// 	}
// }

// –§—É–Ω–∫—Ü–∏–∏, –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
// let plusFive = (number) => {
// 	return number + 5;
//   };
//   // f is assigned the value of plusFive
//   let f = plusFive;

//   plusFive(3); // 8
//   // Since f has a function value, it can be invoked.
//   f(9); // 14

// ------------------------------------------------------------- //

// // –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ - callback function
// const isEven = (n) => {
// 	return n % 2 == 0;
// }
// let printMsg = (evenFunc, num) => {
// 	const isNumEven = evenFunc(num);
// 	console.log(`The number ${num} is an even number: ${isNumEven}.`)
// }
// // Pass in isEven as the callback function
// printMsg(isEven, 4);
//   // Prints: The number 4 is an even number: True.

// ------------------------------------------------------------- //

// –ú–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ .reduce().reduce()–ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ. –û–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å –¥–≤—É–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ (accumulator, currentValue)–∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ù–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ accumulator- —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π, –∞ currentValue- —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫–∞–∫ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞. –ó–¥–µ—Å—å .reduce()–º–µ—Ç–æ–¥ —Å—É–º–º–∏—Ä—É–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞.
// const arrayOfNumbers = [1, 2, 3, 4];
// const sum = arrayOfNumbers.reduce((accumulator, currentValue) => {
// 	return accumulator + currentValue;
// });
// console.log(sum); // 10

// ------------------------------------------------------------- //

// –ú–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ .forEach() .forEach()–ú–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –Ω–∞ –∫–∞–∂–¥–æ–º –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ –≤ –ø–æ—Ä—è–¥–∫–µ. –ó–¥–µ—Å—å —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è console.log()–º–µ—Ç–æ–¥, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ 5—Ä–∞–∑, –ø–æ –æ–¥–Ω–æ–º—É —Ä–∞–∑—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
// const numbers = [28, 77, 45, 99, 27];
// numbers.forEach(number => {
// 	console.log(number);
// });

// ------------------------------------------------------------- //

// –ú–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ .filter().filter()–ú–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ. –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ª–∏–±–æ, true–ª–∏–±–æ false. –í–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ - —ç—Ç–æ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –ª—é–±—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true.–ó–¥–µ—Å—å –º–∞—Å—Å–∏–≤ filteredArray–±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, randomNumbers–Ω–æ 4.
// const randomNumbers = [22, 3, 4, 11, 42, 14, 39];
// const filteredArray = randomNumbers.filter(n => {
// 	return n > 5;
// });
// // console.log(randomNumbers.filter(n => n > 5));

// ------------------------------------------------------------- //

// –ú–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ .map() .map()–ú–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ. –û–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–µ–π –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞. –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –º–∞—Å—Å–∏–≤ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
// const finalParticipants = ['Taylor', 'Donald', 'Don', 'Natasha', 'Bobby'];
// const announcements = finalParticipants.map(member => {
// 	return member + ' joined the contest.';
// })
// console.log(announcements);

// ------------------------------------------------------------- //

// const artists = ['Picasso', 'Kahlo', 'Matisse', 'Utamaro'];
// artists.forEach(artist => {
// 	console.log(artist + ' is one of my favorite artists.');
// });

// const numbers = [1, 2, 3, 4, 5];
// const squareNumbers = numbers.map(number => {
// 	return number * number;
// });
// console.log(squareNumbers);

// const things = ['desk', 'chair', 5, 'backpack', 3.14, 100];
// const onlyNumbers = things.filter(thing => {
// 	return typeof thing === 'number';
// });
// console.log(onlyNumbers);

// /*
// Picasso is one of my favorite artists.
// Kahlo is one of my favorite artists.
// Matisse is one of my favorite artists.
// Utamaro is one of my favorite artists.
// [ 1, 4, 9, 16, 25 ]
// [ 5, 3.14, 100 ]
// */

// ------------------------------------------------------------- //

// // forEach() Method
// const groceries = ['mango', 'papaya', 'pineapple', 'apple'];

// // –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç 1
// groceries.forEach(function (groceryItem) {
// 	console.log('v1 ' + groceryItem);
// });

// // –≤–∞—Ä–∏–∞–Ω—Ç 2
// groceries.forEach(groceryItem => console.log('v2 ' + groceryItem));

// //–∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç 3
// function printGrocery(element) {
// 	console.log('v3 ' + element);
// }
// groceries.forEach(printGrocery);

// // –≤–∞—Ä–∏–∞–Ω—Ç 4
// printGrocery = element => console.log('v4 ' + element);
// groceries.forEach(printGrocery);

// ------------------------------------------------------------- //

// The .map() Method
// the major difference is that .map() returns a new array!

// const numbers = [1, 2, 3, 4, 5];

// const bigNumbers = numbers.map(number => {
// 	return number * 10;
// });

// // –∏–ª–∏
// const bigNumbers = numbers.map(number => number * 10);
// console.log(bigNumbers);

// const animals = ['Hen', 'elephant', 'llama', 'leopard', 'ostrich', 'Whale', 'octopus', 'rabbit', 'lion', 'dog'];

// // Create the secretMessage array below
// const secretMessage = animals.map(animal => {
//   return animal[0];
// });
// console.log(secretMessage.join(''));

// const bigNumbers = [100, 200, 300, 400, 500];
// // Create the smallNumbers array below
// const smallNumbers = bigNumbers.map(num => num / 100);

// ------------------------------------------------------------- //

// The .filter() Method
// Like .map(), .filter() returns a new array, –ù–û –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

// const randomNumbers = [375, 200, 3.14, 7, 13, 852];
// // Call .filter() on randomNumbers below
// const smallNumbers = randomNumbers.filter(num => num < 250);
// // console.log(smallNumbers);

// const favoriteWords = ['nostalgia', 'hyperbole', 'fervent', 'esoteric', 'serene'];
// // Call .filter() on favoriteWords below
// const longFavoriteWords = favoriteWords.filter(str => str.length > 7);

// ------------------------------------------------------------- //

// The .findIndex() Method
// We sometimes want to find the location of an element in an array.

// const jumbledNums = [123, 25, 78, 5, 9];
// const lessThanTen = jumbledNums.findIndex(num => {
// 	return num < 10;
// });
// console.log(lessThanTen); // Output: 3
// console.log(jumbledNums[3]); // Output: 5

// const animals = ['hippo', 'tiger', 'lion', 'seal', 'cheetah', 'monkey', 'salamander', 'elephant'];
// const foundAnimal = animals.findIndex(animal => animal === 'elephant');
// const startsWithS = animals.findIndex(animal => animal[0] === 's');

// ------------------------------------------------------------- //

// The .reduce() Method
// The .reduce() method returns a single value after iterating through the elements of an array, thereby reducing the array.

// const numbers = [1, 2, 4, 10];
// const summedNums = numbers.reduce((accumulator, currentValue) => {
//   return accumulator + currentValue
// })
// console.log(summedNums) // Output: 17

// const summedNums = numbers.reduce((accumulator, currentValue) => {
// 	return accumulator + currentValue
//   }, 100)  // <- Second argument for .reduce() –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞
//   console.log(summedNums); // Output: 117

// const newNumbers = [1, 3, 5, 7];
// const newSum = newNumbers.reduce((accumulator, currentValue) => {
//   console.log('The value of accumulator: ', accumulator);
//   console.log('The value of currentValue: ', currentValue);
//   return accumulator + currentValue;
// }, 10);
// console.log(newSum);

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// 14.01.21

/* const cities = ['Orlando', 'Dubai', 'Edinburgh', 'Chennai', 'Accra', 'Denver', 'Eskisehir', 'Medellin', 'Yokohama'];

const nums = [1, 50, 75, 200, 350, 525, 1000];

//  Choose a method that will return undefined
cities.forEach(city => console.log('Have you visited ' + city + '?'));

// Choose a method that will return a new array
const longCities = cities.filter(city => city.length > 7);

// Choose a method that will return a single value
const word = cities.reduce((acc, currVal) => {
	return acc + currVal[0]
}, "C");

console.log(word)

// Choose a method that will return a new array
const smallerNums = nums.map(num => num - 5);

// Choose a method that will return a boolean value
// –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ –Ω–∞ true
nums.every(num => num < 0); */

/*
.forEach() is used to execute the same code on every element in an array but does not change the array and returns undefined.
.map() executes the same code on every element in an array and returns a new array with the updated elements.
.filter() checks every element in an array to see if it meets certain criteria and returns a new array with the elements that return truthy for the criteria.
.findIndex() returns the index of the first element of an array which satisfies a condition in the callback function. It returns -1 if none of the elements in the array satisfies the condition.
.reduce() iterates through an array and takes the values of the elements and returns a single value.
All iterator methods takes a callback function that can be pre - defined, or a function expression, or an arrow function.
 */

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

/* // Callback Functions / –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
const isEven = (n) => {
	return n % 2 == 0;
}

let printMsg = (evenFunc, num) => {
	const isNumEven = evenFunc(num);
	console.log(`The number ${num} is an even number: ${isNumEven}.`)
}

// Pass in isEven as the callback function
printMsg(isEven, 4);
  // Prints: The number 4 is an even number: True. */

/* let mobile = {
	brand: 'Samsung',
	model: 'Galaxy Note 9'
};

for (let key in mobile) {
	console.log(`${key}: ${mobile[key]}`);
}
 */
/* 
const engine = {
  // method shorthand, with one argument
  start(adverb) {
    console.log(`The engine starts up ${adverb}...`)
  },
  // anonymous arrow function expression with no arguments
  sputter: () => {
    console.log('The engine sputters...')
  },
} */

// engine.start('noisily');
// engine.sputter();

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// 22.01.21  codecademy /lessons/classes/exercises/static-methods

// –í –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º –≤—ã—à–µ –ø—Ä–∏–º–µ—Ä–µ –º—ã —Å–æ–∑–¥–∞–µ–º static–º–µ—Ç–æ–¥ —Å –∏–º–µ–Ω–µ–º, .generateName()–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è. –ò–∑-–∑–∞ static –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, .generateName()—Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏–≤ –µ–≥–æ –∫ Animal–∫–ª–∞—Å—Å—É:
/* class Animal {
  constructor(name) {
    this._name = name
    this._behavior = 0
  }

  static generateName() {
    const names = ['Angel', 'Spike', 'Buffy', 'Willow', 'Tara']
    const randomNumber = Math.floor(Math.random() * 5)
    return names[randomNumber]
  }
}

// –ú—ã –≤—ã–∑—ã–≤–∞–µ–º .generateName()–º–µ—Ç–æ–¥ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º:
// console.log(Animal.generateName())

// Uncaught TypeError: tyson.generateName is not a function
const tyson = new Animal('Tyson')
tyson.generateName()

// Math.floor - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑, 0-10.000
console.log(Math.floor(Math.random() * 10000)) */

//

/* var pasta = 'Spaghetti' // ES5 syntax

var meat = 'Pancetta' // ES6 syntax

var sauce = 'Eggs and cheese' // ES6 syntax

// Template literals, like the one below, were introduced in ES6
var carbonara =
  'You can make carbonara with ' +
  pasta +
  ', ' +
  meat +
  ', and a sauce made with ' +
  sauce +
  '.'
 */

//
